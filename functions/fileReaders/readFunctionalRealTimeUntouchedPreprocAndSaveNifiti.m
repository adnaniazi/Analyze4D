function [data,header] = readFunctionalRealTimeUntouchedPreprocAndSaveNifiti(numFilesToRead)
 msgbox([{'Step 1: Specify the path of the preprocessed data buffer samples file'};...
        {'Step 2: Specify the path of the raw data buffer samples files. This data in its header will be used for making header of the Nifti files'};...
        {'Step 3: Specify the path of the folder where Nifti files are to be saved'};...
        {'Step 4: Specify the base name of the files. Numbering will be automatically appended to this base file name'}],'Procedure','help','modal');
uiwait(gcf); 
% Reads the first series from the buffer for a realTime PACE sequence
filePaths   = uipickfiles('num',numFilesToRead,'Type' , ...
    {'', 'Preprocessed Data buffer samples file'},'REFilter', 'samples' , ...
    'output', 'char',...
    'Prompt', 'Please select Samples file generated by the preprocessed FieldTrip buffer');
filePaths   = filePaths(1:end-7); % gets the path of the samples folder
hdr = ft_read_header(filePaths);
header.numSlices                    = double(hdr.nifti_1.dim(3));
header.xRes                         = double(hdr.nifti_1.dim(1));
header.yRes                         = double(hdr.nifti_1.dim(2));
header.MRAcquistionType             = 3;
header.TR                           = 1/hdr.Fs;
scans                               = hdr.nSamples;
samplesToRead                       = Untouched(scans);
if isempty(samplesToRead)
    samplesToRead                   = 1:1:scans; % Read all the samples
else
    samplesToRead                   = samplesToRead; % Moco series- pick odd samples
end

data                                = single(zeros(hdr.nChans,numel(samplesToRead)));

if ~isempty(filePaths) progressbar('Reading preprcossed volumes'); end
j = 1;
for i = samplesToRead
    data(:,j) = ft_read_data(filePaths, 'begsample' ,i, 'endsample', i);
    progressbar(j/numel(samplesToRead));
    fprintf('Reading Sample %i of %i \n', j, numel(samplesToRead));
    fprintf('..... Actually I am reading Sample %i of %i from the buffer \n', i, scans);
    j = j + 1;
end
header.numScans = numel(samplesToRead);
%% MAKE NIFTI OF TRAINING AND TESTING DATA

filePaths   = uipickfiles('num',numFilesToRead,'Type' , ...
    {'', 'Preprocessed Data buffer samples file'},'REFilter', 'samples' , ...
    'output', 'char',...
    'Prompt', 'Please select Samples file generated by the raw FieldTrip buffer');
filePaths   = filePaths(1:end-7); % gets the path of the samples folder
hdr = ft_read_header(filePaths);
rawData = ft_read_data(filePaths, 'begsample' ,2, 'endsample', 2);

%replacements
nii.hdr.hist.srow_x = hdr.nifti_1.srow_x;
nii.hdr.hist.srow_y = hdr.nifti_1.srow_y;
nii.hdr.hist.srow_z = hdr.nifti_1.srow_z;
nii.hdr.hist.qform_code = hdr.nifti_1.qform_code;
nii.hdr.hist.sform_code = hdr.nifti_1.sform_code;
nii.hdr.hist.quatern_b = hdr.nifti_1.quatern_b;
nii.hdr.hist.quatern_c = hdr.nifti_1.quatern_c;
nii.hdr.hist.quatern_d = hdr.nifti_1.quatern_d;
nii.hdr.hist.quatern_x = hdr.nifti_1.quatern_x;
nii.hdr.hist.quatern_y = hdr.nifti_1.quatern_y;
nii.hdr.hist.quatern_z = hdr.nifti_1.quatern_z;

path = pickDirUsingJFileChooser();
prompt = {'Please specifiy the base file name e.g. ''fmri_scan''. The scan numbers will be appended automatically to this base name.'};
dlg_title = 'Base file name';
num_lines = 1;
def = {'fmri_scan'};
answer = inputdlg(prompt,dlg_title,num_lines,def);
if exist(path, 'dir') ~= 7 % if directory does not exist, then make one
    mkdir(path);
end
if ~isempty(filePaths) progressbar('Saving Nifti files....'); end

for i = 1: size(data,2)
    nii = make_nii(reshape(data(:,i)+single(rawData),hdr.nifti_1.dim), hdr.nifti_1.pixdim, [0 0 0], [16]);
    nii.hdr.hist.srow_x = hdr.nifti_1.srow_x;
    nii.hdr.hist.srow_y = hdr.nifti_1.srow_y;
    nii.hdr.hist.srow_z = hdr.nifti_1.srow_z;
    nii.hdr.hist.qform_code = hdr.nifti_1.qform_code;
    nii.hdr.hist.sform_code = hdr.nifti_1.sform_code;
    nii.hdr.hist.quatern_b = hdr.nifti_1.quatern_b;
    nii.hdr.hist.quatern_c = hdr.nifti_1.quatern_c;
    nii.hdr.hist.quatern_d = hdr.nifti_1.quatern_d;
    nii.hdr.hist.quatern_x = hdr.nifti_1.quatern_x;
    nii.hdr.hist.quatern_y = hdr.nifti_1.quatern_y;
    nii.hdr.hist.quatern_z = hdr.nifti_1.quatern_z;
    if samplesToRead(i) < 10
        filename = strcat(answer{1,1},'_0000', num2str(samplesToRead(i)),'.nii');
    elseif samplesToRead(i) < 100 && samplesToRead(i) > 9
        filename = strcat(answer{1,1},'_000', num2str(samplesToRead(i)),'.nii');
    elseif samplesToRead(i) < 1000 && samplesToRead(i) > 99
        filename = strcat(answer{1,1},'_00', num2str(samplesToRead(i)),'.nii');
    elseif samplesToRead(i) < 10000 && samplesToRead(i) > 999
        filename = strcat(answer{1,1},'_0', num2str(samplesToRead(i)),'.nii');
    else
        filename = strcat(answer{1,1},'_', num2str(samplesToRead(i)),'.nii');
    end
    savepath = fullfile(path, filename);
    save_nii(nii, savepath);
    progressbar(i/numel(samplesToRead));
    
    % take the last scan and generate an SPM from it mask
    if i == 1
        nii.img(find(nii.img ~=0)) = 1;
        filename = strcat(answer{1,1},'_mask','.nii');
        savepath = fullfile(path, filename);
        save_nii(nii, savepath);
    end    
end


